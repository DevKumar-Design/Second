{"ast":null,"code":"import { from, of, BehaviorSubject, forkJoin, EMPTY } from 'rxjs';\nimport { mergeMap, map, tap } from 'rxjs/operators';\nimport { environment } from '../../src/environments/environment';\nimport * as platformClient from 'purecloud-platform-client-v2';\nimport * as i0 from \"@angular/core\";\n// Keys for localStorage\nconst LANGUAGE_KEY = 'gc_language';\nconst ENV_KEY = 'gc_environment';\nexport let GenesysCloudService = /*#__PURE__*/(() => {\n  class GenesysCloudService {\n    constructor() {\n      this.client = platformClient.ApiClient.instance;\n      this.usersApi = new platformClient.UsersApi();\n      this.presenceApi = new platformClient.PresenceApi();\n      this.routingApi = new platformClient.RoutingApi();\n      this.analyticsApi = new platformClient.AnalyticsApi();\n      this.tokensApi = new platformClient.TokensApi();\n      // Authorization values\n      this.language = 'en-us';\n      this.environment = 'mypurecloud.com';\n      this.accessToken = '';\n      this.isAuthorized = new BehaviorSubject(false);\n      // Cache for presence definitions\n      this.presenceDefinitions = new BehaviorSubject([]);\n      this.offlinePresenceId = '';\n      // Persist search values\n      this.lastUserSearchValue = '';\n      this.lastQueueSearchValue = '';\n      // Try to get saved language and environment information from localstorage\n      this.language = localStorage.getItem(LANGUAGE_KEY) || this.language;\n      this.environment = localStorage.getItem(ENV_KEY) || this.environment;\n    }\n    loginImplicitGrant() {\n      return from(this.client.loginImplicitGrant(environment.GENESYS_CLOUD_CLIENT_ID, environment.REDIRECT_URI)).pipe(map(data => {\n        this.accessToken = data.accessToken;\n        this.isAuthorized.next(true);\n        console.log('User authorized.');\n        return data;\n      }));\n    }\n    initialize() {\n      this.client.setPersistSettings(true);\n      this.client.setEnvironment(this.environment);\n      return this.loginImplicitGrant().pipe(mergeMap(data => from(this.presenceApi.getPresencedefinitions())), tap(data => {\n        if (!data.entities) return;\n        // Get the ID of the Offline Presence\n        this.offlinePresenceId = data.entities.find(p => p.systemPresence === 'Offline').id;\n        // Get the list for the other presences\n        this.presenceDefinitions.next(data.entities.filter(p => !(p.systemPresence === 'Offline' || p.systemPresence === 'Idle')));\n      }));\n    }\n    setLanguage(language) {\n      if (language) {\n        this.language = language;\n        localStorage.setItem(LANGUAGE_KEY, this.language);\n      }\n    }\n    setEnvironment(environment) {\n      if (environment) {\n        this.environment = environment;\n        localStorage.setItem(ENV_KEY, this.environment);\n      }\n    }\n    getUserDetails(id) {\n      return from(this.usersApi.getUser(id, {\n        expand: ['routingStatus', 'presence']\n      }));\n    }\n    getUserMe() {\n      return from(this.usersApi.getUsersMe({\n        expand: ['routingStatus', 'presence']\n      }));\n    }\n    getUserQueues(userId) {\n      return from(this.routingApi.getUserQueues(userId, {\n        joined: true\n      })).pipe(map(data => data.entities || []));\n    }\n    getQueueObservations(queueId) {\n      return from(this.analyticsApi.postAnalyticsQueuesObservationsQuery({\n        filter: {\n          type: 'or',\n          predicates: [{\n            type: 'dimension',\n            dimension: 'queueId',\n            operator: 'matches',\n            value: queueId\n          }]\n        },\n        metrics: ['oOnQueueUsers', 'oActiveUsers']\n      })).pipe(map(data => {\n        const result = data.results?.find(r => r.group?.['queueId'] === queueId);\n        if (!result) throw new Error(`No results queried for ${queueId}`);\n        return result;\n      }));\n    }\n    setUserPresence(userId, presenceId) {\n      return from(this.presenceApi.patchUserPresencesPurecloud(userId, {\n        presenceDefinition: {\n          id: presenceId\n        }\n      }));\n    }\n    logoutUser(userId) {\n      return forkJoin({\n        deletetoken: from(this.tokensApi.deleteToken(userId)),\n        setOffline: from(this.presenceApi.patchUserPresence(userId, 'PURECLOUD', {\n          presenceDefinition: {\n            id: this.offlinePresenceId\n          }\n        }))\n      });\n    }\n    /**\n     * Logout users belonging to the queue. This includes agents that are not\n     * 'on-queue'. For this sample app, we'd just take the first 100 members.\n     * In order, to get ALL agents, paging of the results is needed.\n     * @param queueId The Genesys Cloud Queue Id\n     */\n    logoutUsersFromQueue(queueId) {\n      return from(this.routingApi.getRoutingQueueMembers(queueId)).pipe(mergeMap(result => {\n        if (!result.entities) return EMPTY;\n        const userLogoutArr = result.entities.map(user => this.logoutUser(user.id));\n        const observables = Object.assign({}, userLogoutArr);\n        console.log(observables);\n        return forkJoin(observables);\n      }));\n    }\n    searchUsers(term) {\n      if (!term.trim()) {\n        return of([]);\n      }\n      let searchBody = {\n        sortOrder: 'SCORE',\n        pageSize: 25,\n        pageNumber: 1,\n        expand: ['routingStatus', 'presence'],\n        query: [{\n          type: 'TERM',\n          fields: ['name', 'email'],\n          value: term,\n          operator: 'AND'\n        }]\n      };\n      return from(this.usersApi.postUsersSearch(searchBody)).pipe(map(data => data.results || []));\n    }\n    searchQueues(term) {\n      return from(this.routingApi.getRoutingQueues({\n        pageSize: 10,\n        name: `*${term}*`\n      })).pipe(map(data => data.entities || []));\n    }\n    static #_ = this.ɵfac = function GenesysCloudService_Factory(t) {\n      return new (t || GenesysCloudService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GenesysCloudService,\n      factory: GenesysCloudService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return GenesysCloudService;\n})();","map":{"version":3,"names":["from","of","BehaviorSubject","forkJoin","EMPTY","mergeMap","map","tap","environment","platformClient","LANGUAGE_KEY","ENV_KEY","GenesysCloudService","constructor","client","ApiClient","instance","usersApi","UsersApi","presenceApi","PresenceApi","routingApi","RoutingApi","analyticsApi","AnalyticsApi","tokensApi","TokensApi","language","accessToken","isAuthorized","presenceDefinitions","offlinePresenceId","lastUserSearchValue","lastQueueSearchValue","localStorage","getItem","loginImplicitGrant","GENESYS_CLOUD_CLIENT_ID","REDIRECT_URI","pipe","data","next","console","log","initialize","setPersistSettings","setEnvironment","getPresencedefinitions","entities","find","p","systemPresence","id","filter","setLanguage","setItem","getUserDetails","getUser","expand","getUserMe","getUsersMe","getUserQueues","userId","joined","getQueueObservations","queueId","postAnalyticsQueuesObservationsQuery","type","predicates","dimension","operator","value","metrics","result","results","r","group","Error","setUserPresence","presenceId","patchUserPresencesPurecloud","presenceDefinition","logoutUser","deletetoken","deleteToken","setOffline","patchUserPresence","logoutUsersFromQueue","getRoutingQueueMembers","userLogoutArr","user","observables","Object","assign","searchUsers","term","trim","searchBody","sortOrder","pageSize","pageNumber","query","fields","postUsersSearch","searchQueues","getRoutingQueues","name","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\amerluza\\temp\\prog\\genesys\\blueprints\\_all\\angular-app-with-genesys-cloud-sdk\\genesys-cloud-sample\\src\\app\\genesys-cloud.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, from, of, BehaviorSubject, forkJoin, EMPTY } from 'rxjs';\nimport { mergeMap, map, tap } from 'rxjs/operators';\nimport { environment } from '../../src/environments/environment';\nimport * as platformClient from 'purecloud-platform-client-v2';\n\n// Keys for localStorage\nconst LANGUAGE_KEY = 'gc_language';\nconst ENV_KEY = 'gc_environment'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GenesysCloudService {\n  private client = platformClient.ApiClient.instance;\n  private usersApi = new platformClient.UsersApi();\n  private presenceApi = new platformClient.PresenceApi();\n  private routingApi = new platformClient.RoutingApi();\n  private analyticsApi = new platformClient.AnalyticsApi();\n  private tokensApi = new platformClient.TokensApi();\n\n  // Authorization values\n  language: string = 'en-us';\n  environment: string = 'mypurecloud.com';\n  accessToken = '';\n  isAuthorized = new BehaviorSubject<boolean>(false);\n\n  // Cache for presence definitions\n  presenceDefinitions = new BehaviorSubject<platformClient.Models.OrganizationPresence[]>([]);\n  offlinePresenceId = '';\n\n  // Persist search values\n  lastUserSearchValue = '';\n  lastQueueSearchValue = '';\n\n  constructor() {\n    // Try to get saved language and environment information from localstorage\n    this.language = localStorage.getItem(LANGUAGE_KEY) || this.language;\n    this.environment = localStorage.getItem(ENV_KEY) || this.environment;\n  }\n\n  private loginImplicitGrant(): Observable<platformClient.AuthData> {\n    return from(this.client.loginImplicitGrant(environment.GENESYS_CLOUD_CLIENT_ID, environment.REDIRECT_URI))\n            .pipe(\n              map(data => {\n                this.accessToken = data.accessToken;\n                this.isAuthorized.next(true);\n                console.log('User authorized.');\n\n                return data;\n              })\n            );\n  }\n\n  initialize(): Observable<any> {\n    this.client.setPersistSettings(true);\n    this.client.setEnvironment(this.environment);\n\n    return this.loginImplicitGrant().pipe(\n              mergeMap(data => from(this.presenceApi.getPresencedefinitions())),\n              tap(data => {\n                if(!data.entities) return;\n\n                // Get the ID of the Offline Presence\n                this.offlinePresenceId = data.entities\n                        .find(p => p.systemPresence === 'Offline')!.id!;\n\n                // Get the list for the other presences\n                this.presenceDefinitions.next(\n                  data.entities.filter(p => !(p.systemPresence === 'Offline' || p.systemPresence === 'Idle'))\n                );\n              }),\n            );\n  }\n\n  setLanguage(language: string | null): void {\n    if(language) {\n      this.language = language;\n      localStorage.setItem(LANGUAGE_KEY, this.language);\n    }\n  }\n\n  setEnvironment(environment: string | null): void {\n    if(environment) {\n      this.environment = environment;\n      localStorage.setItem(ENV_KEY, this.environment);\n    }\n  }\n\n  getUserDetails(id: string): Observable<platformClient.Models.User> {\n    return from(this.usersApi.getUser(id, { \n        expand: ['routingStatus', 'presence'],\n      }));\n  }\n\n  getUserMe(): Observable<platformClient.Models.UserMe> {\n    return from(this.usersApi.getUsersMe({ \n        expand: ['routingStatus', 'presence'],\n      }));\n  }\n\n  getUserQueues(userId: string): Observable<platformClient.Models.UserQueue[]> {\n    return from(this.routingApi.getUserQueues(userId, { joined: true }))\n            .pipe(map(data => data.entities || []));\n  }\n\n  getQueueObservations(queueId: string): Observable<platformClient.Models.QueueObservationDataContainer>{\n    return from(this.analyticsApi.postAnalyticsQueuesObservationsQuery({\n      filter: {\n        type: 'or',\n        predicates: [\n         {\n          type: 'dimension',\n          dimension: 'queueId',\n          operator: 'matches',\n          value: queueId\n         }\n        ]\n       },\n       metrics: [ 'oOnQueueUsers', 'oActiveUsers' ]\n    }))\n    .pipe(\n      map(data => {\n        const result = data.results?.find(r => r.group?.['queueId'] === queueId); \n        if(!result) throw new Error(`No results queried for ${queueId}`);\n\n        return result;\n      }),\n    );\n  }\n\n  setUserPresence(userId: string, presenceId: string): Observable<platformClient.Models.UserPresence> {\n    return from(this.presenceApi.patchUserPresencesPurecloud(\n        userId, \n        { presenceDefinition: { id: presenceId } }\n      ));\n  } \n\n  logoutUser(userId: string): Observable<any> {\n    return forkJoin({\n        deletetoken: from(this.tokensApi.deleteToken(userId)),\n        setOffline: from(this.presenceApi.patchUserPresence(userId, 'PURECLOUD', {\n                        presenceDefinition: { id: this.offlinePresenceId }\n                    })),\n      });\n  }\n\n  /**\n   * Logout users belonging to the queue. This includes agents that are not\n   * 'on-queue'. For this sample app, we'd just take the first 100 members.\n   * In order, to get ALL agents, paging of the results is needed.\n   * @param queueId The Genesys Cloud Queue Id\n   */\n  logoutUsersFromQueue(queueId: string): Observable<any> {\n    return from(this.routingApi.getRoutingQueueMembers(queueId))\n      .pipe(\n        mergeMap(result => {\n          if(!result.entities) return EMPTY;\n\n          const userLogoutArr = result.entities.map(user => this.logoutUser(user.id!));\n          const observables = Object.assign({}, (userLogoutArr));\n          console.log(observables)\n\n          return forkJoin(observables);\n        })\n      )\n  }\n\n  searchUsers(term: string): Observable<platformClient.Models.User[]> {\n    if(!term.trim()){\n      return of([]);\n    }\n\n    let searchBody = {\n      sortOrder: 'SCORE',\n      pageSize: 25,\n      pageNumber: 1,\n      expand: ['routingStatus', 'presence'],\n      query: [{\n        type: 'TERM',\n        fields: ['name', 'email'],\n        value: term,\n        operator: 'AND'\n      }]\n    };\n\n    return from(this.usersApi.postUsersSearch(searchBody))\n      .pipe(map(data => data.results || []));\n  }\n\n  searchQueues(term: string): Observable<platformClient.Models.Queue[]> {\n    return from(this.routingApi.getRoutingQueues({\n        pageSize: 10, name: `*${term}*`,\n      }))\n      .pipe(\n        map(data => data.entities || [])\n      );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}