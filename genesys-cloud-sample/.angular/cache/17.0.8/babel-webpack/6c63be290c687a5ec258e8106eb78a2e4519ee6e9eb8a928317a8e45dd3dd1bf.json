{"ast":null,"code":"import { from, of, BehaviorSubject, forkJoin, EMPTY } from 'rxjs';\nimport { mergeMap, map, tap } from 'rxjs/operators';\nimport { environment } from '../../src/environments/environment';\nimport * as platformClient from 'purecloud-platform-client-v2';\nimport * as i0 from \"@angular/core\";\n// Keys for localStorage\nconst LANGUAGE_KEY = 'gc_language';\nconst ENV_KEY = 'gc_environment';\nexport let GenesysCloudService = /*#__PURE__*/(() => {\n  class GenesysCloudService {\n    constructor() {\n      this.client = platformClient.ApiClient.instance;\n      this.usersApi = new platformClient.UsersApi();\n      this.presenceApi = new platformClient.PresenceApi();\n      this.routingApi = new platformClient.RoutingApi();\n      this.analyticsApi = new platformClient.AnalyticsApi();\n      this.tokensApi = new platformClient.TokensApi();\n      // Authorization values\n      this.language = 'en-us';\n      this.environment = 'mypurecloud.com';\n      this.accessToken = '';\n      this.isAuthorized = new BehaviorSubject(false);\n      // Cache for presence definitions\n      this.presenceDefinitions = new BehaviorSubject([]);\n      this.offlinePresenceId = '';\n      // Persist search values\n      this.lastUserSearchValue = '';\n      this.lastQueueSearchValue = '';\n      // Try to get saved language and environment information from localstorage\n      this.language = localStorage.getItem(LANGUAGE_KEY) || this.language;\n      this.environment = localStorage.getItem(ENV_KEY) || this.environment;\n    }\n    loginImplicitGrant() {\n      return from(this.client.loginImplicitGrant(environment.GENESYS_CLOUD_CLIENT_ID, environment.REDIRECT_URI)).pipe(map(data => {\n        this.accessToken = data.accessToken;\n        this.isAuthorized.next(true);\n        console.log('User authorized.');\n        return data;\n      }));\n    }\n    initialize() {\n      this.client.setPersistSettings(true);\n      this.client.setEnvironment(this.environment);\n      return this.loginImplicitGrant().pipe(mergeMap(data => from(this.presenceApi.getPresencedefinitions())), tap(data => {\n        if (!data.entities) return;\n        // Get the ID of the Offline Presence\n        this.offlinePresenceId = data.entities.find(p => p.systemPresence === 'Offline').id;\n        // Get the list for the other presences\n        this.presenceDefinitions.next(data.entities.filter(p => !(p.systemPresence === 'Offline' || p.systemPresence === 'Idle')));\n      }));\n    }\n    setLanguage(language) {\n      if (language) {\n        this.language = language;\n        localStorage.setItem(LANGUAGE_KEY, this.language);\n      }\n    }\n    setEnvironment(environment) {\n      if (environment) {\n        this.environment = environment;\n        localStorage.setItem(ENV_KEY, this.environment);\n      }\n    }\n    getUserDetails(id) {\n      return from(this.usersApi.getUser(id, {\n        expand: ['routingStatus', 'presence']\n      }));\n    }\n    getUserMe() {\n      return from(this.usersApi.getUsersMe({\n        expand: ['routingStatus', 'presence']\n      }));\n    }\n    getUserQueues(userId) {\n      return from(this.routingApi.getUserQueues(userId, {\n        joined: true\n      })).pipe(map(data => data.entities || []));\n    }\n    getQueueObservations(queueId) {\n      return from(this.analyticsApi.postAnalyticsQueuesObservationsQuery({\n        filter: {\n          type: 'or',\n          predicates: [{\n            type: 'dimension',\n            dimension: 'queueId',\n            operator: 'matches',\n            value: queueId\n          }]\n        },\n        metrics: ['oOnQueueUsers', 'oActiveUsers']\n      })).pipe(map(data => {\n        const result = data.results?.find(r => r.group?.['queueId'] === queueId);\n        if (!result) throw new Error(`No results queried for ${queueId}`);\n        return result;\n      }));\n    }\n    setUserPresence(userId, presenceId) {\n      return from(this.presenceApi.patchUserPresencesPurecloud(userId, {\n        presenceDefinition: {\n          id: presenceId\n        }\n      }));\n    }\n    logoutUser(userId) {\n      return forkJoin({\n        deletetoken: from(this.tokensApi.deleteToken(userId)),\n        setOffline: from(this.presenceApi.patchUserPresence(userId, 'PURECLOUD', {\n          presenceDefinition: {\n            id: this.offlinePresenceId\n          }\n        }))\n      });\n    }\n    /**\n     * Logout users belonging to the queue. This includes agents that are not\n     * 'on-queue'. For this sample app, we'd just take the first 100 members.\n     * In order, to get ALL agents, paging of the results is needed.\n     * @param queueId The Genesys Cloud Queue Id\n     */\n    logoutUsersFromQueue(queueId) {\n      return from(this.routingApi.getRoutingQueueMembers(queueId)).pipe(mergeMap(result => {\n        if (!result.entities) return EMPTY;\n        const userLogoutArr = result.entities.map(user => this.logoutUser(user.id));\n        const observables = Object.assign({}, userLogoutArr);\n        console.log(observables);\n        return forkJoin(observables);\n      }));\n    }\n    searchUsers(term) {\n      if (!term.trim()) {\n        return of([]);\n      }\n      let searchBody = {\n        sortOrder: 'SCORE',\n        pageSize: 25,\n        pageNumber: 1,\n        expand: ['routingStatus', 'presence'],\n        query: [{\n          type: 'TERM',\n          fields: ['name', 'email'],\n          value: term,\n          operator: 'AND'\n        }]\n      };\n      return from(this.usersApi.postUsersSearch(searchBody)).pipe(map(data => data.results || []));\n    }\n    searchQueues(term) {\n      return from(this.routingApi.getRoutingQueues({\n        pageSize: 10,\n        name: `*${term}*`\n      })).pipe(map(data => data.entities || []));\n    }\n    static #_ = this.ɵfac = function GenesysCloudService_Factory(t) {\n      return new (t || GenesysCloudService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GenesysCloudService,\n      factory: GenesysCloudService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return GenesysCloudService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}